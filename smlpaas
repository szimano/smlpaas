#!/usr/bin/env groovy
import static Constants.*

if (args) {
	switch(args[0]) {
		case "deploy":
			deployCMD(args.drop(1))
			break
		case "setup":
			setupCMD(args.drop(1))
			break
		case "restart":
			restartCMD(args.drop(1))
			break
		case "tail":
			tailCMD(args.drop(1))
			break
		case "stop":
			stopCMD(args.drop(1))
			break
		case "stopAll":
			stopAllCMD(args.drop(1))
			break
		case "start":
			startCMD(args.drop(1))
			break
		case "addResource":
			addResourceCMD(args.drop(1))
			break
		default:
			println "Unknown command: '${args[0]}'"
			break
	}
}
else {
	println "usage\n smlpaas [command]"
}

class Constants {
    static final CONFIG_FILE_NAME = ".smlpaas"
	static final PROFILES = ["tomcat7", "jar"/*, "wildfly8", "jboss7"*/]
}

def deployCMD(String[] args) {	
	if (args.length != 1) {
		println "usage\n smlpaas deploy FILE"
	} else {
		String pathToWar = getFullPath(args[0])
				
		Config config = figureServer(pathToWar)
		String serverURL = config.url
		
		if (new File(pathToWar).exists()) {
			stop(config)
			
			println "Uploading $pathToWar"
			def copyCMD =  "rsync --partial --progress --rsh=ssh $pathToWar app@$serverURL:dropbox/FILE"
			runAndWaitCMD(copyCMD)
			
			println "Deploying FILE"
			def deployCMD = "ssh app@$serverURL \"scripts/${config.profile}/deploy.sh\""
			runAndWaitCMD(deployCMD)
			
			start(config)
			
			println "$pathToWar deployed and server started"
		} else {
			println "The WAR file  ($pathToWar) does not exist"
		}
	}
}

def getFullPath(String path) {
	if (!path.startsWith("/")) {
		return new File(path).canonicalPath
	}
	else {
		return path
	}
}

def figureServer(String path) {
	File file = new File(path)
	while (file != null) {
		if (file.isDirectory()) {
			File config = new File(CONFIG_FILE_NAME, file)
			if (config.exists()) {
				def props = new Properties()
				config.withInputStream { 
  			  		stream -> props.load(stream) 
				}
				
				def configuration = new Config(url: props["url"], profile: props["profile"], runParams: props["runParams"])
				println "Using config: $configuration from $config.name"
				
				return configuration
			}
		}
		file = file.parentFile
	}
	
	System.err.println "Could not figure out server config for file $path. Maybe do smlpaas config first?"
	System.exit(-1)
}

def setupCMD(String[] args) {	
	if (args.length < 2 || args.length > 4) {
		println "usage\n smlpaas setup DIRECTORY SERVER_IP [PROFILE] [RUN_PARAMS]"
	} else {
		def dirName = args[0]
		def ip = args[1]
		def profile = args.length >= 3 ? args[2] : "tomcat7"
		def runParams = args.length >= 4 ? args[3] : ""
		
		if (!(profile in PROFILES)) {
			println "Unknown profile: $profile, available profiles: $PROFILES"
		}
		
		File dir = new File(dirName)
		if (dir.exists() && dir.isDirectory()) {
			File configFile = new File(CONFIG_FILE_NAME, dir)
			configFile.delete()
			configFile << "url: $ip\n"
			configFile << "profile: $profile\n"
			configFile << "runParams: $runParams\n"
			
			println "Setup for server $ip at $dirName completed"
		} else {
			println "ERROR $dirName does not exist or is not a directory"
		}
	}
}

def restartCMD(String[] args) {
	findConfigAndRun(args, {Config config -> restart(config)})
}

def stopCMD(String[] args) {
	findConfigAndRun(args, {Config config -> stop(config)})
}

def stopAllCMD(String[] args) {
	findConfigAndRun(args, {Config config -> 
			PROFILES.each {
				def newConfig = config.clone()
				newConfig.profile = it
				stop(newConfig)
			}
		})
}

def startCMD(String[] args) {
	findConfigAndRun(args, {Config config -> start(config)})
}

def tailCMD(String[] args) {
	findConfigAndRun(args, {Config config -> String serverURL = config.url
		String tailCMD = "ssh app@$serverURL \"scripts/${config.profile}/tail.sh\""
		runCMD(tailCMD)
		
		pause()})
}

def addResourceCMD(String[] args) {
	if (args.length != 2) {
		println "Usage: smlpaas addResource FILE TARGET"
		} else {
		def pathToFile = new File(args[0]).absolutePath
		
		findConfigAndRun([pathToFile].toArray(), {Config config -> 
			
			def fileName = new File(pathToFile).name
			def target = args[1]
			def serverURL = config.url
			
			println "Uploading $pathToFile"
			def copyCMD =  "rsync --partial --progress --rsh=ssh $pathToFile app@$serverURL:dropbox/$fileName"
			runAndWaitCMD(copyCMD)
		
			println "Add resource"
			def addResourceCMD = "ssh app@$serverURL scripts/${config.profile}/add_resource.sh $fileName $target"
			runAndWaitCMD(addResourceCMD)
		})
	}
}

def findConfigAndRun(args, Closure c) {
	def config
	if (args.length == 0) {
		config = figureServer(".")
	} else {
		config = figureServer(args[0])
	}
	
	c(config)
}

def restart(Config config) {
	stop(config)
	start(config)
}

def stop(Config config) {
	println "Stoping server"
	def stopCMD = "ssh app@${config.url} \"scripts/${config.profile}/stop.sh\""
	runAndWaitCMD(stopCMD)
}

def start(Config config) {
	println "Starting server"
	def startCMD = "ssh app@${config.url} scripts/${config.profile}/start.sh \"$config.runParams\""
	runAndWaitCMD(startCMD)
}

def runCMD(String cmd) {
	def process = cmd.execute()
	process.consumeProcessOutput(System.out, System.err)
	return process
}

def runAndWaitCMD(String cmd) {
	def process = runCMD(cmd)
	process.waitFor()
}

def pause() {
	System.in.withReader {
		println it.readLine()
	}
}

@groovy.transform.Canonical
@groovy.transform.AutoClone
class Config {
def url
def profile
def runParams
}